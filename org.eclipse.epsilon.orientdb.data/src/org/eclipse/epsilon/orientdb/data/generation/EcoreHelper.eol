operation EClass getJavaTypeName(typePrefix, typeSufix) {
	
	return typePrefix + self.getName() + typeSufix;
}

operation EReference getJavaTypeName(typePrefix, typeSufix) {
	
	return typePrefix + self.getName().firstToUpperCase() + typeSufix;
}

/**
 * Get the index information. If available, returns a Sequence containing the EAttribute static 
 * identifier (same used when creating the vertex class) and the index type.
 */
@cached 
operation EClass getIndex() : Sequence {
	var annot = self.getEAnnotation("https://eclipse.org/epsilon/incremental/OrientDbIndex");
    if (annot.isUndefined()) {
        return null;
    }
    var details = annot.getDetails();
    if (details.containsKey('type')) {
        var attr = annot.getReferences().first().getName().splitCamelCase("_").toUpperCase();
        var type = details.get('type');
        var res : Sequence();
        res.add(attr);
        res.add(type);
        return res;
    }
    return null;
}

@cahced
operation EReference isEdge() : Boolean {
    var annot = self.getEAnnotation("https://eclipse.org/epsilon/incremental/OrientDbGraph");
    if (annot.isUndefined()) {
        return false;
    }
    var details = annot.getDetails();
    if (details.containsKey('edge')) {
        var isEdge = details.get('edge');
        return isEdge == 'true';
    }
    return false;
}

operation String splitCamelCase() : String {
	return self.splitCamelCase(" ");
}

operation String splitCamelCase(char : String) : String {
	var sp = self.split("(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])");
	return sp.concat(char).firstToUpperCase();
}